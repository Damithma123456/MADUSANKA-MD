const { updateEnv, readEnv } = require('../lib/database');
const EnvVar = require('../lib/mongodbenv');
const config = require('../config')
const {cmd , commands} = require('../command')
const os = require("os")
const yts = require('yt-search');
const {runtime} = require('../lib/functions')
const axios = require('axios');
const cheerio = require('cheerio');


cmd({
    pattern: "ringtone",
    alias: ["ringtones", "ring"],
    desc: "Get a random ringtone from the API.",
    react: "🎵",
    category: "fun",
    filename: __filename,
},
async (conn, mek, m, { from, reply, args }) => {
    try {
        const query = args.join(" ");
        if (!query) {
            return reply("Please provide a search query! Example: .ringtone Suna");
        }

        const { data } = await axios.get(`https://www.dark-yasiya-api.site/download/ringtone?text=${encodeURIComponent(query)}`);

        if (!data.status || !data.result || data.result.length === 0) {
            return reply("No ringtones found for your query. Please try a different keyword.");
        }

        const randomRingtone = data.result[Math.floor(Math.random() * data.result.length)];

        await conn.sendMessage(
            from,
            {
                audio: { url: randomRingtone.dl_link },
                mimetype: "audio/mpeg",
                fileName: `${randomRingtone.title}.mp3`,
            },
            { quoted: m }
        );
    } catch (error) {
        console.error("Error in ringtone command:", error);
        reply("Sorry, something went wrong while fetching the ringtone. Please try again later.");
    }
});

cmd({
    pattern: "thenuxai",
    alias: ["aiimg", "generateimg", "aiimage"],
    desc: "Generate AI Images using Stable Diffusion",
    category: "ai",
    react: "🤖",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        // Check if prompt is provided
        if (!q) return reply(`
*🤖 MALAKA-MD IMG AI 🖼️*

Usage: .thenuxai <image description>
Example: .thenuxai Beautiful landscape with mountains

*Tips:*
- Be specific in your description
- Use descriptive words
- Mention style, color, mood
`);

        // React to show processing
        await m.react("🔄");

        // Construct API URL with the prompt
        const apiUrl = `https://api.davidcyriltech.my.id/diffusion?prompt=${encodeURIComponent(q)}`;

        // Fetch the image from the API
        const response = await axios({
            method: 'get',
            url: apiUrl,
            responseType: 'arraybuffer',
            timeout: 60000 // 60 seconds timeout
        });

        // Check if response is valid
        if (!response.data) {
            return reply("❌ Failed to generate image. No data received.");
        }

        // Send the generated image
        await conn.sendMessage(from, {
            image: response.data,
            caption: `*🤖 MALAKA-MD IMG AI 🖼️*

*📝 Prompt:* ${q}

*Generated by ThenuxAI*
*Model:* Stable Diffusion
`,
            quoted: mek
        });

        // React to successful image generation
        await m.react("✅");

    } catch (error) {
        console.error("ThenuxAI Image Generation Error:", error);
        
        // React to error
        await m.react("❌");

        // Detailed error handling
        if (error.response) {
            // The request was made and the server responded with a status code
            console.log(error.response.data);
            console.log(error.response.status);
            console.log(error.response.headers);

            if (error.response.status === 429) {
                return reply("⏳ Too many requests. Please try again later.");
            } else if (error.response.status === 500) {
                return reply("🚫 Server error. Unable to generate image.");
            } else {
                return reply(`❌ Error: ${error.response.status} - ${error.response.statusText}`);
            }
        } else if (error.request) {
            // The request was made but no response was received
            console.log(error.request);
            return reply("🌐 No response received from the server. Check your internet connection.");
        } else {
            // Something happened in setting up the request that triggered an Error
            console.log('Error', error.message);
            return reply(`❌ An unexpected error occurred: ${error.message}`);
        }
    }
});


//=====================================

cmd({
  pattern: "menu",
  desc: "Commands panel",
  react: '📜',
  filename: __filename
}, async (bot, message, args, options) => {
  const { from, quoted, reply, pushname } = options;

  try {
    // Menu Text
    const menuText = `
╭═════════════════●●►
│ *Creator* : ⚙️𝗠𝗔𝗗𝗨𝗦𝗔𝗡𝗞𝗔  𝗠𝗗🪄
│ *Version* : v0.1
│ *Uptime*  : 17 seconds
│ *RAM Usage* : 50.22MB
╰═════════════════●●►
│🪀 *LIST MENU*
│   ───────
│ _1_ *📍ᴅᴏᴡɴʟᴏᴀᴅ menu*
│ _2_ *📍ᴏᴡɴᴇʀ menu*
│ _3_ *📍ɢʀᴏᴜᴘ ᴍᴇɴᴜ*
│ _4_ *📍ᴄᴏɴᴠᴇʀᴛ menu*
│ _5_ *📍ꜱᴇᴀʀᴄʜ menu*
╰═════════════════●●►
*🙊🖤 Reply the Number you want to select*

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃`;

    // Send Menu Message
    const sentMenuMessage = await bot.sendMessage(from, {
      text: menuText,
      contextInfo: {
        mentionedJid: [''],
        groupMentions: [],
        forwardingScore: 1,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363382823666763@newsletter',
          newsletterName: "ᴍᴀᴅᴜꜱᴀɴᴋᴀ ᴍᴅ",
          serverMessageId: 999
        },
        externalAdReply: { 
          title: 'ᴍᴀᴅᴜꜱᴀɴᴋᴀ ᴍᴅ',
          body: `${pushname}`,
          mediaType: 1,
          sourceUrl: "https://github.com/Malaka-KG/MALAKA-MD-V1",
          thumbnailUrl: "https://i.ibb.co/RkrM4XdG/941.jpg",
          renderLargerThumbnail: true,
          showAdAttribution: true
        }
      }
    }, { quoted: message });

    const menuMessageId = sentMenuMessage.key.id;

    const menuResponses = {
'1': { imageCaption:
`╭═════════════════⚆
> ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ 👩‍💻
╰═════════════════⚆
╭═════════════════⚆
*►  .ꜱᴏɴɢ*
> (ʏᴏᴜᴛᴜʙᴇ ꜱᴏɴɢ ᴅᴏᴡɴʟᴏᴀᴅ)

*►  .ᴠɪᴅᴇᴏ*
> (ʏᴏᴜᴛᴜʙᴇ ᴠɪᴅᴇᴏ ᴅᴏᴡɴʟᴏᴀᴅ)

*►  .ꜰʙ*
> (ꜰʙ ᴠɪᴅᴇᴏ ᴅᴏᴡɴʟᴏᴀᴅ)

*►  .ᴛɪᴋᴛᴏᴋ*
> (ᴛɪᴋᴛᴏᴋ ᴠɪᴅᴇᴏ ᴅᴏᴡɴʟᴏᴀᴅ)
╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '2': { imageCaption: 
`╭═════════════════⚆
> ᴏᴡɴᴇʀ ᴍᴇɴᴜ 👨‍💻
╰═════════════════⚆
╭═════════════════⚆
*►  .ꜱᴇᴛᴛɪɴɢꜱ*
> (ʙᴏᴛ ꜱᴇᴛᴛɪɴɢꜱ ᴄʜᴀɴɢʀ)

*►  .ʙᴏᴏᴍ*
> (ʙᴏᴏᴍ ᴍꜱɢ ꜱᴇɴᴅ)

*►  .ʀᴇꜱᴛᴀʀᴛᴇ*
> (ʙᴏᴛ ʀᴇꜱᴛᴀʀᴛᴇ)

*►  .ʙʟᴏᴄʟ*
> (ʙʟᴏᴄᴋ ᴄʜᴀᴛ)

*►  .ᴜɴʙʟᴏᴄᴋ*
> (ᴜɴʙʟᴏᴄᴋ ᴄʜᴀᴛ)

*►  .ᴄʟᴇᴀʀᴄʜᴀᴛꜱ*
> (ᴄʜᴀᴛ ᴄʟᴇᴀʀ)

*►  .ᴊɪᴅ*
> (ᴄʜᴀᴛ ᴊɪᴅ)

*►  .ɢᴊɪᴅ*
> (ɢʀᴏᴜᴘ ᴊɪᴅꜱ)

*►  .ꜰᴜʟᴘᴘ*
> (ꜱᴇᴛ ᴘʀᴏꜰɪʟᴇ ᴘʜᴏᴛᴏ)

*►  .ʟᴇᴀᴠᴇ*
> (ɢʀᴏᴜᴘ ʟᴇᴀᴠᴇ)

*►  .ᴏᴡɴᴇʀ*
> (ɢʀᴏᴜᴘ ᴏᴡɴᴇʀ)

╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '3': { imageCaption: 
`╭═════════════════⚆
> ɢʀᴏᴜᴘ ᴍᴇɴᴜ 👥
╰═════════════════⚆
╭═════════════════⚆
*►  .ᴀᴅᴅ*
> (ɢʀᴏᴜᴘ ᴍᴀᴍᴍʙᴜꜱ ᴀᴅᴅ)

*►  .ɪɴᴠɪᴛᴇ*
> (ɪɴᴠɪᴛᴇ ᴛᴏ ɢʀᴏᴜᴘ)

*►  .ᴋɪᴄᴋ*
> (ɢʀᴏᴜᴘ ᴍᴀᴍʙᴜꜱᴇ ᴋɪᴄᴋ)

*►  .ᴀᴘᴘʀᴏᴠᴇ*
> (ɢʀᴏᴜᴘ ᴍᴀᴍʙᴜꜱᴇ ᴀᴘᴘʀᴏᴠᴇ)

*►  .ʀᴇᴊᴇᴄᴛ*
> (ɢʀᴏᴜᴘ ᴀᴘᴘʀᴏᴠᴇ ʀᴇᴊᴇᴄᴛ)

*►  .ᴘʀᴏᴍᴏᴛᴇ*
> (ɢʀᴏᴜᴘ ᴀᴅᴍɪɴ ꜱᴇᴛ)

*►  .ᴅᴇᴍᴏᴛᴇ*
> (ɢʀᴏᴜᴘ ᴀᴅᴍɪɴ ʀᴇᴍᴏᴠᴇ)

*►  .ᴍᴜᴛᴇ*
> (ɢʀᴏᴜᴘ ᴀᴅᴍɪɴ ᴏɴʟɪ ꜱᴇᴛ)

*►  .ᴅᴇʟ*
> (ɢʀᴏᴜᴘ ᴍꜱɢ ᴅᴇʟ)

*►  .ᴜɴᴍᴜᴛᴇ*
> (ɢʀᴏᴜᴘ ᴄʜᴀᴛ ᴏᴘᴇɴ)

*►  .ᴛᴀɢᴀᴅᴍɪɴ*
> (ɢʀᴏᴜᴘ ᴀᴅᴍɪɴ ᴛᴀɢ.)

*►  .ᴛᴀɢᴀʟʟ*
> (ɢʀᴏᴜᴘ ᴀʟʟ ᴛᴀɢ.)

*►  .ʀᴇQᴜᴇꜱᴛꜱ*
> (ɢʀᴏᴜᴘ ʀᴇQᴜᴇꜱᴛꜱ.)

*►  .ᴇɴᴅ*
> (ɢʀᴏᴜᴘ ᴇɴᴅ.)

*►  .ᴏᴘᴇɴᴛɪᴍᴇ*
> (ɢʀᴏᴜᴘ ᴏᴘᴇɴᴛɪᴍᴇ.)

*►  .ᴄʟᴏꜱᴇᴛɪᴍᴇ*
> (ɢʀᴏᴜᴘ ᴄʟᴏꜱᴇᴛɪᴍᴇ.)

*►  .ᴛᴀɢᴀᴅᴍɪɴ*
> (ɢʀᴏᴜᴘ ᴛᴀɢᴀᴅᴍɪɴ.)

*►  .ꜱᴇᴛɴᴀᴍᴇ*
> (ꜱᴇᴛ ɢʀᴏᴜᴘ ɴᴀᴍᴇ)

*►  .ꜱᴇᴛᴅᴇꜱᴄ*
> (ꜱᴇᴛ ɢʀᴏᴜᴘ ᴅᴇꜱᴄʀɪᴘᴛɪᴏɴ)

*►  .ɪɴᴠɪᴛᴇ*
> (ɢʀᴏᴜᴘ ɪɴᴠɪᴛᴇ ʟɪɴᴋ.)

*►  .ʜɪᴅᴇᴛᴀɢ*
> (ɢʀᴏᴜᴘ ᴀʟʟ ᴛᴀɢ ᴛᴏ ᴍꜱɢ.)

╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '4': { imageCaption: 
`╭═════════════════⚆
> ᴄᴏɴᴠᴇʀᴛ ᴍᴇɴᴜ 🌀
╰═════════════════⚆
╭═════════════════⚆
*► .ꜱᴛɪᴄᴋᴇʀ*
> (ɪᴍɢ ᴛᴏ ᴄᴏɴᴠᴇʀᴛ ꜱᴛɪᴄᴋᴇʀ)

*►  .ᴀᴛᴛᴘ*
> (ᴀᴛᴛᴘ ꜱᴛɪᴄᴋᴇʀ)

*►  .ᴛᴏɪᴍɢ*
> (ᴛᴏɪᴍɢ ꜱᴛɪᴄᴋᴇʀ)

*►  .ᴛᴏᴘᴛᴛ*
> (ᴛᴏᴘᴛᴛ ᴠɪᴅᴇᴏ)

*►  .ᴛʀᴛ*
> (ʟᴀɴɢᴜᴀɢᴇ ᴛʀᴀɴꜱʟᴀᴛᴇʀ)

*►  .ᴠᴠ*
> (ᴠᴠ ᴍᴇɴᴜ)

*►  .pair*
> (pair 9470******)

*►  .qr*
> (qr 9470******)

╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '5': { imageCaption: 
`╭═════════════════⚆
> ᴀɪ ᴍᴇɴᴜ 🌀
╰═════════════════⚆
╭═════════════════⚆
*►  .ᴀɪ*
> (ᴀɪ ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .ɢᴘᴛ*
> (ɢᴘᴛ ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .ᴍɪꜱᴛʀᴀᴀɪ*
> (ᴍɪꜱᴛʀᴀᴀɪ ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .ɢᴘᴛ2*
> (ɢᴘᴛ2 ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .ʟʟᴀᴍᴀ3*
> (ʟʟᴀᴍᴀ3 ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .ᴍᴇᴛᴀɪ*
> (ᴍᴇᴛᴀɪ ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .ɢᴘᴛ4ᴏ*
> (ɢᴘᴛ4ᴏ ᴍᴇɴᴜ)
╰═════════════════⚆

╭═════════════════⚆
*►  .toolbot*
> (*toolbot* ᴍᴇɴᴜ)
╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '6': { imageCaption: 
`╭═════════════════⚆
> ᴍᴏᴠɪᴇ >ꜱɪɴʜᴀʟᴀꜱᴜʙ 🎬
╰═════════════════⚆
╭═════════════════⚆
*►  .ꜱɪɴʜᴀʟᴀꜱᴜʙ >ᴍᴏᴠɪᴇ ᴍᴇɴᴜ*
> (ꜱɪɴʜᴀʟᴀꜱᴜʙ ᴍᴏᴠɪᴇ)

*►  .ɢɪɴɪꜱɪꜱɪʟᴀ >ᴄᴀʀᴛᴏᴏɴ ᴍᴇɴᴜ*
> (ɢɪɴɪꜱɪꜱɪʟᴀ ᴍᴏᴠɪᴇ)

*►  .ᴍᴏᴠɪᴇ2 >ꜱᴇᴀʀᴄʜ ᴍᴇɴᴜ*
> (ᴍᴏᴠɪᴇ2 ꜱᴇᴀʀᴄʜ)


╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '7': { imageCaption: 
`╭═════════════════⚆
> ꜱᴇᴀʀᴄʜ ᴍᴇɴᴜ 🔎
╰═════════════════⚆
╭═════════════════⚆
*► .ytsearch*
> (ʏᴏᴜᴛᴜʙᴇ ꜱᴇᴀʀᴄʜ)
╰═════════════════⚆

╭═════════════════⚆
*► .tiktoksearch*
> (*tiktoksearch ꜱᴇᴀʀᴄʜ*)
╰═════════════════⚆

╭═════════════════⚆
*► .tiktokss*
> (*tiktokss ꜱᴇᴀʀᴄʜ*)
╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },

      '8': { imageCaption: 
`╭═════════════════⚆
> ɴᴇᴡꜱ ᴍᴇɴᴜ 🔎
╰═════════════════⚆
╭═════════════════⚆
*► .hiru*
> (hiru ɴᴇᴡꜱ)
╰═════════════════⚆

╭═════════════════⚆
*► .lankadeepa*
> (lankadeepa ɴᴇᴡꜱ)
╰═════════════════⚆

╭═════════════════⚆
*► .sirasa*
> (sirasa ɴᴇᴡꜱ)
╰═════════════════⚆

╭═════════════════⚆
*► .ada*
> (ada ɴᴇᴡꜱ)
╰═════════════════⚆

╭═════════════════⚆
*► .bbc*
> (bbc ɴᴇᴡꜱ)
╰═════════════════⚆

╭═════════════════⚆
*► .gagana*
> (gagana ɴᴇᴡꜱ)
╰═════════════════⚆

╭═════════════════⚆
*► .ɴᴇᴡꜱ*
> (ɴᴇᴡꜱ ɴᴇᴡꜱ)
╰═════════════════⚆

> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃` },
    };

    // Listen for replies to the menu message
    bot.ev.on("messages.upsert", async event => {
      const newMessage = event.messages[0];
      if (!newMessage.message) return;

      const userReply = newMessage.message.conversation || newMessage.message.extendedTextMessage?.text;
      const isReplyToMenu = newMessage.message.extendedTextMessage?.contextInfo?.stanzaId === menuMessageId;

      if (isReplyToMenu) {
        const response = menuResponses[userReply];
        if (response) {
          // Send image response
          await bot.sendMessage(from, {
            text: response.imageCaption,
            contextInfo: {
              mentionedJid: [''],
              groupMentions: [],
              forwardingScore: 1,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '120363382823666763@newsletter',
                newsletterName: "ᴍᴀᴅᴜꜱᴀɴᴋᴀ ᴍᴅ",
                serverMessageId: 1
              },
              externalAdReply: {
                title: 'ᴍᴀᴅᴜꜱᴀɴᴋᴀ ᴍᴅ',
                body: `${pushname}`,
                mediaType: 1,
                sourceUrl: "https://github.com/Malaka-KG/MALAKA-MD-V1",
                thumbnailUrl: "https://i.ibb.co/RkrM4XdG/941.jpg",
                renderLargerThumbnail: true,
                showAdAttribution: true
              }
            }
          }, { quoted: newMessage });
        } else {
          // Handle invalid input
          await bot.sendMessage(from, {
            text: "Invalid option! Please reply with a valid number."
          }, { quoted: newMessage });
        }
      }
    });
  } catch (error) {
    console.error(error);
    reply(`Error: ${error.message}`);
  }
});


cmd({
    pattern: "alive",
    alias: ["malaka-md", "MALAKA-MD", "uptime"],
    desc: "Check uptime and system status",
    category: "main",
    react: "👋",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        // Generate system status message
        const status = `
╭━━〔 *⚙️𝗠𝗔𝗗𝗨𝗦𝗔𝗡𝗞𝗔  𝗠𝗗🪄* 〕━━┈⊷
│▸ *👋 Hello dark nero I'm alive now*
│🇱🇰 I'm 𝗜 ⚙️𝗠𝗔𝗗𝗨𝗦𝗔𝗡𝗞𝗔  𝗠𝗗🪄 Whatsapp Bot✓
│───────────┈⊷
│▸ ● ᴠᴇʀᴛɪᴏɴ  : ᴠ0.1 🍃
 |
│▸ ● ᴄᴏᴍᴍᴀɴᴅ : 100+ ✅
│▸ ● ᴅᴇᴠᴀʟᴏᴘ  : ⚙️𝗠𝗔𝗗𝗨𝗦𝗔𝗡𝗞𝗔  𝗠𝗗🪄
│▸───────────┈⊷
│▸> *ʙᴏᴛ ɢɪᴛʜᴜʙ 👨‍💻*
https://github.com/madusanka-KG/MADUSANKA-MD-V1
│───────────┈⊷
│▸> *ᴊᴏɪɴ ᴡʜᴀᴛꜱᴀᴘᴘ ɢʀᴏᴜᴘ 👇*
https://chat.whatsapp.com/H2zKVvtWUQh07i2SkDjfEj
│───────────┈⊷
*│* *ʙᴏᴛ ᴏᴡɴᴇʀ 👩‍💻*
+94756331255
│───────────┈⊷
*││▸ ⚙️𝗠𝗔𝗗𝗨𝗦𝗔𝗡𝗞𝗔  𝗠𝗗🪄 WHATSAPP BOT*
│───────────┈⊷
╰──────────────┈⊷
> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃`;

        // Send the status message with an image
        await conn.sendMessage(from, { 
            image: { url: `https://i.ibb.co/RkrM4XdG/941.jpg` },  // Image URL
            caption: status,
            contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 1,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363382823666763@newsletter',
                    newsletterName: 'ᴍᴀʟᴀᴋᴀ-ᴍᴅ',
                    serverMessageId: 143
                }
            }
        }, { quoted: mek });

    } catch (e) {
        console.error("Error in alive command:", e);
        reply(`An error occurred: ${e.message}`);
    }
});

cmd(
  {
    pattern: "restart",
    desc: "Restart the bot",
    category: "owner",
    react: "💢",
    filename: __filename,
  },
  async (
    conn,
    mek,
    m,
    {
      from,
      quoted,
      body,
      isCmd,
      command,
      args,
      q,
      isGroup,
      sender,
      senderNumber,
      botNumber2,
      botNumber,
      pushname,
      isMe,
      isOwner,
      groupMetadata,
      groupName,
      participants,
      groupAdmins,
      isBotAdmins,
      isAdmins,
      reply,
    }
  ) => {
    try {
      if (!isOwner) {
    return reply("❌ You Are Not The Owner !");
  }
      const { exec } = require("child_process");
      reply("Restarting...");
      await new Promise((resolve) => setTimeout(resolve, 1500)); // Sleep function
      exec("pm2 restart all", (error, stdout, stderr) => {
        if (error) {
          console.error(`Error: ${error.message}`);
          reply(`Error: ${error.message}`);
          return;
        }
        if (stderr) {
          console.error(`Stderr: ${stderr}`);
          reply(`Stderr: ${stderr}`);
          return;
        }
        console.log(`Stdout: ${stdout}`);
        reply("Bot restarted successfully.");
      });
    } catch (e) {
      console.error(e);
      reply(`An error occurred: ${e.message}`);
    }
  }
);

cmd({
    pattern: "settings",
    alias: ["setting"],
    desc: "settings the bot",
    category: "owner",
    react: "⚙",
    filename: __filename


},
async (conn, mek, m, { from, isOwner, quoted, reply }) => {
    if (!isOwner) return reply("❌ You are not the owner!");
    try {
        let desc = `
╭────────────────···▸
│▸⚙𝗠𝗔𝗗𝗨𝗦𝗔𝗡𝗞𝗔 𝗠𝗗 SETTINGS⚙
╰────────────────···▸
│▸ WORK MODE 
│▸ ┣ 1.1  Public Work🌍
│▸ ┣ 1.2  Private Work👤
│▸ ┣ 1.3  Group Only🫂
│▸ ┗ 1.4  Inbox Only👥
│▸
│▸ AUTO VOICE 
│▸ ┣ 2.1  Auto Voice ON 📲
│▸ ┗ 2.2  Auto Voice OFF 📴
│▸
│▸ AUTO STATUS SEEN 
│▸ ┣ 3.1  Auto Read Status ON 📲
│▸ ┗ 3.2  Auto Read Status OFF 📴
│▸
│▸ AUTO STICKER 
│▸ ┣ 4.1  Auto sticker ON 📲
│▸ ┗ 4.2  Auto sticker OFF 📴
│▸
│▸ AUTO REPLY 
│▸ ┣ 5.1  Auto reply ON 📲
│▸ ┗ 5.2  Auto reply OFF 📴
│▸
│▸ AUTO_REACT 
│▸ ┣ 6.1  Auto react ON 📲
│▸ ┗ 6.2  Auto react OFF 📴
│▸
│▸ HEART_REACT 
│▸ ┣ 7.1  heart react ON 📲
│▸ ┗ 7.2  heart react OFF 📴
│▸
│▸ OWNER_REACT 
│▸ ┣ 8.1  owner react ON 📲
│▸ ┗ 8.2  owner react OFF 📴
│▸
│▸ WELCOME_SET 
│▸ ┣ 9.1  welcome set ON 📲
│▸ ┗ 9.2  welcome set OFF 📴
│▸
│▸ WELCOME_ALERT 
│▸ ┣ 10.1  welcome alert ON 📲
│▸ ┗ 10.2  welcome alert OFF 📴
│▸
│▸ WELCOME 
│▸ ┣ 11.1  welcome ON 📲
│▸ ┗ 11.2  welcome OFF 📴
│▸
│▸ ALLOWS_ONLINE 
│▸ ┣ 12.1  allows online ON 📲
│▸ ┗ 12.2  allows online OFF 📴
│▸
│▸ ANTI_LINK 
│▸ ┣ 13.1  anti link ON 📲
│▸ ┗ 13.2  anti link OFF 📴
│▸
│▸ ANTI_BAD 
│▸ ┣ 14.1  anti bad ON 📲
│▸ ┗ 14.2  anti bad OFF 📴
│▸
│▸ READ_MESSAGE 
│▸ ┣ 15.1  read message ON 📲
│▸ ┗ 15.2  read message OFF 📴
│▸
│▸ ALLWAYS_OFFLINE 
│▸ ┣ 16.1  allways offline ON 📲
│▸ ┗ 16.2  allways offline OFF 📴
│▸
│▸ AUTO_TYPING 
│▸ ┣ 18.1  auto typing ON 📲
│▸ ┗ 18.2  auto typing OFF 📴
│▸
│▸ AUTO_BLOCK 
│▸ ┣ 20.1  auto block ON 📲
│▸ ┗ 20.2  auto block OFF 📴
│▸
│▸ ANTI_BOT 
│▸ ┣ 21.1  anti bot ON 📲
│▸ ┗ 21.2  anti bot OFF 📴
│▸
│▸ AUTO_REACT_STATUS 
│▸ ┣ 22.1  react_status ON 📲
│▸ ┗ 22.2  react_status OFF 📴
│▸
│▸ FAKE_RECORDING 
│▸ ┣ 24.1  fake recorbing ON 📲
│▸ ┗ 24.2  fake recorbing OFF 📴
│▸
└────────────────···▸
> 🧟‍♀️ᴘᴏᴡᴇʀᴅ ʙʏ ᴍᴀʟᴀᴋᴀ ᴍᴅ / ꜱᴜʀᴀᴛʜ ᴍᴅ🍃`;

        const vv = await conn.sendMessage(from, { image: { url: "https://i.ibb.co/RkrM4XdG/941.jpg"}, caption: desc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1.1':
                        reply(".update MODE:public" );
                        reply(".restart");
                        break;
                    case '1.2':               
                        reply(".update MODE:private");
                        reply(".restart");
                        break;
                    case '1.3':               
                          reply(".update MODE:group");
                        reply(".restart");
                      break;
                    case '1.4':     
                        reply(".update MODE:inbox");
                        reply(".restart");
                      break;
                    case '2.1':     
                        reply(".update AUTO_VOICE:true");
                        reply(".restart");
                        break;
                    case '2.2':     
                        reply(".update AUTO_VOICE:false");
                        reply(".restart");
                    break;
                    case '3.1':    
                        reply(".update AUTO_READ_STATUS:true");
                        reply(".restart");
                    break;
                    case '3.2':    
                        reply(".update AUTO_READ_STATUS:false");
                        reply(".restart");
                    break;                    
                    case '4.1':    
                        reply(".update AUTO_STICKER:true");
                        reply(".restart");
                    break;
                    case '4.2':    
                        reply(".update AUTO_STICKER:false");
                        reply(".restart");
                    break;                                        
                    case '5.1':    
                        reply(".update AUTO_REPLY:true");
                        reply(".restart");
                    break;
                    case '5.2':    
                        reply(".update AUTO_REPLY:false");
                        reply(".restart");
                    break;
                    case '6.1':    
                        reply(".update AUTO_REACT:true");
                        reply(".restart");
                    break;
                    case '6.2':    
                        reply(".update AUTO_REACT:false");
                        reply(".restart");
                    break;
                    case '7.1':    
                        reply(".update HEART_REACT:true");
                        reply(".restart");
                    break;
                    case '7.2':    
                        reply(".update HEART_REACT:false");
                        reply(".restart");
                    break;
                    case '8.1':    
                        reply(".update OWNER_REACT:true");
                        reply(".restart");
                    break;
                    case '8.2':    
                        reply(".update OWNER_REACT:false");
                        reply(".restart");
                    break;
                    case '9.1':    
                        reply(".update WELCOME_SET:true");
                        reply(".restart");
                    break;
                    case '9.2':    
                        reply(".update WELCOME_SET:false");
                        reply(".restart");
                    break;
                    case '10.1':    
                        reply(".update WELCOME_ALERT:true");
                        reply(".restart");
                    break;
                    case '10.2':    
                        reply(".update WELCOME_ALERT:false");
                        reply(".restart");
                    break;
                    case '11.1':    
                        reply(".update WELCOME:true");
                        reply(".restart");
                    break;
                    case '11.2':    
                        reply(".update WELCOME:false");
                        reply(".restart");
                    break;
                    case '12.1':    
                        reply(".update ALLOWS_ONLINE:true");
                        reply(".restart");
                    break;
                    case '12.2':    
                        reply(".update ALLOWS_ONLINE:false");
                        reply(".restart");
                    break;
                    case '13.1':    
                        reply(".update ANTI_LINK:true");
                        reply(".restart");
                    break;
                    case '13.2':    
                        reply(".update ANTI_LINK:false");
                        reply(".restart");
                    break;
                    case '14.1':    
                        reply(".update ANTI_BAD:true");
                        reply(".restart");
                    break;
                    case '14.2':    
                        reply(".update ANTI_BAD:false");
                        reply(".restart");
                    break;
                    case '15.1':    
                        reply(".update READ_MESSAGE:true");
                        reply(".restart");
                    break;
                    case '15.2':    
                        reply(".update READ_MESSAGE:false");
                        reply(".restart");
                    break;
                    case '16.1':    
                        reply(".update ALLWAYS_OFFLINE:true");
                        reply(".restart");
                    break;
                    case '16.2':    
                        reply(".update ALLWAYS_OFFLINE:false");
                        reply(".restart");
                    break;
                    case '17.1':    
                        reply(".update ANTI_DELETE:true");
                        reply(".restart");
                    break;
                    case '17.2':    
                        reply(".update ANTI_DELETE:false");
                        reply(".restart");
                    break;
                    case '18.1':    
                        reply(".update AUTO_TYPING:true");
                        reply(".restart");
                    break;
                    case '18.2':    
                        reply(".update AUTO_TYPING:false");
                        reply(".restart");
                    break;
                    case '19.1':    
                        reply(".update AI_CHAT:true");
                        reply(".restart");
                    break;
                    case '19.2':    
                        reply(".update AI_CHAT:false");
                        reply(".restart");
                    break;
                    case '20.1':    
                        reply(".update AUTO_BLOCK:true");
                        reply(".restart");
                    break;
                    case '20.2':    
                        reply(".update AUTO_BLOCK:false");
                        reply(".restart");
                    break;
                    case '21.1':    
                        reply(".update ANTI_BOT:true");
                        reply(".restart");
                    break;
                    case '21.2':    
                        reply(".update ANTI_BOT:false");
                        reply(".restart");
                    break;
                    case '22.1':    
                        reply(".update AUTO_REACT_STATUS:true");
                        reply(".restart");
                    break;
                    case '22.2':    
                        reply(".update AUTO_REACT_STATUS:false");
                        reply(".restart");
                    break;
                    case '23.1':    
                        reply(".update ANTI_CALL:true");
                        reply(".restart");
                    break;
                    case '23.2':    
                        reply(".update ANTI_CALL:false");
                        reply(".restart");
                    break;
                    case '24.1':    
                        reply(".update FAKE_RECORDING:true");
                        reply(".restart");
                    break;
                    case '24.2':    
                        reply(".update FAKE_RECORDING:false");
                        reply(".restart");
                    break;

            
                    default:
                        reply("Invalid option. Please select a valid option🔴");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '❌', key: mek.key } })
        reply('An error occurred while processing your request.');
    }
});


cmd({
    pattern: "update",
    alias: ["undefined"],
    desc: "Check and update environment variables",
    react: "⚙",
    category: "owner",
    filename: __filename,
},
async (conn, mek, m, { from, q, reply, isOwner }) => {
    
    if (!isOwner) return reply("❌ You are not the owner!");

    if (!q) {
        return reply("🙇‍♂️ *Please provide the environment variable and its new value.* \n\nExample: `.update ALIVE_MSG: hello i am prabath kumara`");
    }

    // Find the position of the first colon or comma
    const colonIndex = q.indexOf(':');
    const commaIndex = q.indexOf(',');

    // Ensure we have a valid delimiter index
    const delimiterIndex = colonIndex !== -1 ? colonIndex : commaIndex;
    if (delimiterIndex === -1) {
        return reply("🫠 *Invalid format. Please use the format:* `.update KEY:VALUE`");
    }

    // Extract key and value
    const key = q.substring(0, delimiterIndex).trim();
    const value = q.substring(delimiterIndex + 1).trim();
    
    // Extract mode if provided
    const parts = value.split(/\s+/).filter(part => part.trim());
    const newValue = value; // Use the full value as provided by the user
    const mode = parts.length > 1 ? parts.slice(1).join(' ').trim() : '';
    
    const validModes = ['public', 'private', 'groups', 'inbox'];
    const finalMode = validModes.includes(mode) ? mode : '';

    if (!key || !newValue) {
        return reply("🫠 *Invalid format. Please use the format:* `.update KEY:VALUE`");
    }

    // Specific checks for MODE, ALIVE_IMG, and AUTO_READ_STATUS
    if (key === 'MODE' && !validModes.includes(newValue)) {
        return reply(`😒 *Invalid mode. Valid modes are: ${validModes.join(', ')}*`);
    }

    if (key === 'ALIVE_IMG' && !newValue.startsWith('https://')) {
        return reply("😓 *Invalid URL format. PLEASE GIVE ME IMAGE URL*");
    }

    if (key === 'AUTO_READ_STATUS' && !['true', 'false'].includes(newValue)) {
        return reply("😓 *Invalid value for AUTO_READ_STATUS. Please use `true` or `false`.*");
    }

    try {
        // Check if the environment variable exists
        const envVar = await EnvVar.findOne({ key: key });

        if (!envVar) {
            // If the variable does not exist, fetch and list all existing env vars
            const allEnvVars = await EnvVar.find({});
            const envList = allEnvVars.map(env => `${env.key}: ${env.value}`).join('\n');
            return reply(`❌ *The environment variable ${key} does not exist.*\n\n*Here are the existing environment variables:*\n\n${envList}`);
        }

        // Update the environment variable
        await updateEnv(key, newValue, finalMode);
        reply(`✅ *Environment variable updated.*\n\n🗃️ *${key}* ➠ ${newValue} ${finalMode ? `\n*Mode:* ${finalMode}` : ''}`);
        
    } catch (err) {
        console.error('Error updating environment variable:' + err.message);
        reply("🙇‍♂️ *Failed to update the environment variable. Please try again.*" + err);
    }
});
